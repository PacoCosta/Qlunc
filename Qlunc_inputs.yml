
# Francisco Costa García
# University of Stuttgart, Stuttgart Wind Energy (SWE) 2020 (c) 

# Inputs file for Qlunc (Quantification lidar uncertainties). 
# Do not change definition names or vary the structure of the file!! Just change parameter values. 
# Users can find a yaml format template in the repository '/Main/Template_yaml_inputs_file.yml'


# DIRECTORIES:------------------------------------------------------

Main directory: '.' # Directory where Qlunc_Classes.py is
#Project: Gandia # Name of the project. A .nc file is created in the folder "Projects" to save the lidar object and its characteristics. Aimed to link with mocalum/yaddum

# Lidar values. Modules and components parameters: ------------------------------------------------------

Components:
#Optics: 
  Scanner:
    
    Name: Scanner_Yaml # Provide an ID to your scanner:      
    Origin:  [[0,150,1],[0,-150,1]] #[[380,0,1],[380,0,1]] #   Lidar position in meters (each vector is one lidar): [x,y,z] 
    Error origin: [[0,0,0],[0,0,0],[0,0,0]] # [m] Error in the location of the lidar (GPS error)
       
    # Montecarlo n° of points
    N_MC: 1000 # N° of points for the Montecarlo simulation 
    
    # Lissajous patterns:
    Lissajous parameters: [50,50,1000,3,3] # [x_dim,y_dim,z_dim,q,p]
    
    #Vertical plane parameters
    Vertical plane parameters: [500,89.15,-89.15,29.85,208.15,10] # [distance_plane,y_max,y_min,z_min,z_max,n°points]
    
    #Horizontal plane parameters
    Horizontal plane parameters: [2000,-2000,2000,-2000,100,10] # [x_max,x_min,y_max,y_min,height,n°points]    
    
    
    # Measuring pattern 
    Pattern: 'None' # 'vertical plane','horizontal plane', 'lissajous', user defined pattern or 'None' in case none predefined pattern is used - Only with SCAN type
  
    # STDV in lidar angles and focus distance
    stdv focus distance:  [ [2]  , [2]   , [2]   ] # [m] One value for each lidar (this will be removed since the error in focus distance is calculated using telescope parameters (see Telescope section))
    stdv Elevation angle: [ [.1], [.1] , [.1] ] # [deg]
    stdv Azimuth:         [ [.1], [.1] , [.1] ] # [deg]   
    stdv Estimation:      [ [.0] , [.0]  , [.0]  ] # [m/s]       # error, as standard uncertainty, in the estimation of the Vlos from the doppler spectra 
    # Correlations betwen the lidars 1 and 2, and elevation-azimuth of each lidar
    correlations: [ 0.50, # Psi1Psi2
                    0.0, # Psi1Psi3
                    0.0, # Psi2Psi3
                                       
                    0.50 , # Theta1Theta2
                    0.0 , # Theta1Theta3
                    0.0 , # Theta2Theta3
                             
                    0.50,  # Rho1Rho2
                    0.0,  # Rho1Rho3
                    0.0,  # Rho2Rho3
                    
                    0.10,  # Psi1Theta1
                    0.10,  # Psi2Theta2
                    0.0,  # Psi3Theta3
                    
                    0.10,  # Psi1Theta2
                    0.0,  # Psi1Theta3
                    
                    0.10,  # Psi2Theta1
                    0.0,  # Psi2Theta3
                                        
                    0.0,  # Psi3Theta1
                    0.0]  # Psi3Theta2

    
    # Measurement point coordinates in spherical (related to the inertial coordinate system)    
    Rho:   [500]   # [m] 
    Theta: [13.6] # 1.3467 13.54 [deg] - Theta increases from the ground (elevation angle)
    Psi:   [0]  # [deg] 
    Href:  1.0e+2 # Meters
    
  Laser:
    Name: Laser_YAML
    Wavelength: 1550.e-9 # [m]
    stdv Wavelength: 0.1e-9 #[m] plus/minus--> it is assumed a rectangular distribution (stdv_Wavelength/sqrt(3)) 
    Uncertainty function: uphc.UQ_Laser   
    # Uncertainty function:
    Uncertainty function: uopc.UQ_Scanner
    
# Photonics  
 
  Photodetector:
    Name: Photodetector_YAML
    Photodetector BandWidth: 2.e+9   # [Hz]            
    Load resistor: 500 #1.e+8                 # [Ohm]
    Photodetector efficiency: .70   # Photodetector efficiency [-]
    Dark current: .6e-9                 # In [A]. Dark current in the photodetector.
    Photodetector signalP: 1.e-3 #1.e-2        # [W/m^2]
    Power interval: [1.e-5,1.e-2,1.e-6]  # [1.e-6,1,1.e-5]          # [W] [initial, final, step]
    Gain TIA: 50.e+3                     # [W] Value or 'None' if no TIA in the photodetector
    Active area: 1 # [m] - Keep it 1;
    V Noise TIA:  2.e-3 #None #               # [V] Value or 'None' if no TIA in the photodetector
    Uncertainty function: uphc.UQ_Photodetector # Python module! (You develop a function and save it as a python module)
  

# Analog to digital converter: Performs the uncertainty in signal processing
  ADC:
    Name: ADC_Yaml
    Number of bits: 8 # Effective number of bits (ENOB)
    Reference voltage: 3.3
    Ground voltage: 0
    Quantization error: 0.5
    Sampling frequency: 100.e+6
    Uncertainty sampling freq: 2.e-6 #   #*fs (2.e-6)
    Speckle noise: 0.0 # noise in % of the Doppler frequency
    ADC Bandwidth: 1.e+9
    Uncertainty function: uspc.UQ_SignalProcessor_Classes
        
# Lidar general inputs 
  Lidar general inputs:
    Name: Lidar_gral_inputs_Yaml
    Type: Pulsed # CW/Pulsed for continuous wave or pulsed lidars. The difference is that AOM (photonics module) is included in calculations when Pulsed and probe volume calculations
    Yaw error: 0       # [deg]
    Pitch error: 0     # [deg]
    Roll error: 0      # [deg]
    DataFrame: {}      # Leave empty. To be filled with ouputs by the code itself
---
# Modules:
Modules:
  Optics Module:
    Name: Optics_module_Yamlpl
    Scanner: Scanner #None #
    Uncertainty function: uopc.sum_unc_optics # Python module! (You develop a function and save it as a python module)
  Photonics Module:
    Name: Photonics_module_Yaml
    Photodetector: Photodetector           # Has to be the same name as the instance
    Uncertainty function: uphc.sum_unc_photonics # Python module! (You develop a function and save it as a python module)
  Signal processor Module:
    Name: Signal_processor_module_Yaml
    ADC: ADC
    Frequency analyser: 'None' #Frequency_analyser
---  
# Lidar:
Lidar:
  Name: Test   # This will be the name of the project
  Photonics module: Photonics_Module #None #      # Has to be the same name as the instance
  Optics module: Optics_Module           #None #Has to be the same name as the instance
  Signal processor: Signal_processor_Module
  Lidar inputs: Lidar_inputs               # Has to be the same name as the instance
  Uncertainty function: ulc.sum_unc_lidar  # Python module! (You develop a function and save it as a python module)

---

# ATMOSPHERIC INPUTS:-----------------------------------------------
# Atmospheric_inputs to create the atmospheric scenarios

Atmospheric_inputs:
  Name: 'Atmosphere_Yaml'
  TimeSeries    : False # This defines whether we are using a time series (True) or single values (False) to describe the atmosphere characteristics (T, H, rain and fog)   
  Atmos_TS_FILE : 'None' #'AtmosphericScenarios.csv'  # (... .csv)
  Temperature: [300] # [K] Have to put the same number of elements for temperature and humidity. Always in paired values   
  Humidity: [12]     # [%] 
  Rain: true # for rain and fog intensity intervals might be introduced [none,low, medium, high]
  Fog: false
  Height ground: 0 # [m] Ground height
  Power law exponent: [.2] #power law exponent. Vector of alpha values.
  Vref: 10 # [m/s]
  Wind direction:  [0,359] # degrees [from,to]
  Wind tilt: 0 # degrees
  
---

# Plotting:------------------------------------------------------------
Flags:
  
  Scanning Pattern: True
  Photodetector noise: False
  Save Scanning Coordinates: True
  Probe Volume parameters: False
  Optical_amplifier_noise: False
  Line of sight Velocity Uncertainty: True
  Horizontal Velocity Uncertainty: True
  Wind direction Uncertainty: True



# Francisco Costa García
# University of Stuttgart, Stuttgart Wind Energy (SWE) 2020 (c) 

# Inputs file for Qlunc (Quantification lidar uncertainties). 
# Do not change definition names or vary the structure of the file!! Just change parameter values. 
# Users can find a yaml format template in the repository '/Main/Template_yaml_inputs_file.yml'


# DIRECTORIES:------------------------------------------------------

Main directory: '.' # Directory where Qlunc_Classes.py is
#Project: Gandia # Name of the project. A .nc file is created in the folder "Projects" to save the lidar object and its characteristics. Aimed to link with mocalum/yaddum

# Lidar values. Modules and components parameters: ------------------------------------------------------

Components:
#Optics: 
  Scanner:
    
    Name: Scanner_Yaml # Provide an ID to your scanner:      
    Origin:  [[0,150,1],[0,-150,1],[-2000,0,5]] #[[380,0,1],[380,0,1]] #   Lidar position in meters (each vector is one lidar): [x,y,z] 
    Error origin: [[0,0,0],[0,0,0],[0,0,0]] # [m] Error in the location of the lidar (GPS error)
       
    # Montecarlo n° of points
    N_MC: 1 # N° of points for the Montecarlo simulation 
    
    # Lissajous patterns:
    Lissajous parameters: [50,50,1000,3,3] # [x_dim,y_dim,z_dim,q,p]
    
    #Vertical plane parameters
    Vertical plane parameters: [500,89.15,-89.15,29.85,208.15,10] # [distance_plane,y_max,y_min,z_min,z_max,n°points]
    
    #Horizontal plane parameters
    Horizontal plane parameters: [2000,-2000,2000,-2000,100,10] # [x_max,x_min,y_max,y_min,height,n°points]    
    
    
    # Measuring pattern 
    Pattern: 'vertical plane' # 'vertical plane','horizontal plane', 'lissajous', user defined pattern or 'None' in case none predefined pattern is used - Only with SCAN type
  
    # STDV in lidar angles and focus distance
    stdv focus distance:  [ [2]  , [2]   , [2]   ] # [m] One value for each lidar (this will be removed since the error in focus distance is calculated using telescope parameters (see Telescope section))
    stdv Elevation angle: [ [.1], [.1] , [.1] ] # [deg]
    stdv Azimuth:         [ [.1], [.1] , [.1] ] # [deg]   
    stdv Estimation:      [ [.0] , [.0]  , [.0]  ] # [m/s]       # error, as standard uncertainty, in the estimation of the Vlos from the doppler spectra 
    # Correlations betwen the lidars 1 and 2, and elevation-azimuth of each lidar
    correlations: [ 0.50, # Psi1Psi2
                    0.0, # Psi1Psi3
                    0.0, # Psi2Psi3
                                       
                    0.50 , # Theta1Theta2
                    0.0 , # Theta1Theta3
                    0.0 , # Theta2Theta3
                             
                    0.50,  # Rho1Rho2
                    0.0,  # Rho1Rho3
                    0.0,  # Rho2Rho3
                    
                    0.10,  # Psi1Theta1
                    0.10,  # Psi2Theta2
                    0.0,  # Psi3Theta3
                    
                    0.10,  # Psi1Theta2
                    0.0,  # Psi1Theta3
                    
                    0.10,  # Psi2Theta1
                    0.0,  # Psi2Theta3
                                        
                    0.0,  # Psi3Theta1
                    0.0]  # Psi3Theta2

    
    # Measurement point coordinates in spherical (related to the inertial coordinate system)    
    Rho:   [500]   # [m] 
    Theta: [13.6] # 1.3467 13.54 [deg] - Theta increases from the ground (elevation angle)
    Psi:   [0]  # [deg] 
    Href:  1.0e+2 # Meters
    
  Laser:
    Name: Laser_YAML
    Wavelength: 1550.e-9 # [m]
    stdv Wavelength: 0.1e-9 #[m] plus/minus--> it is assumed a rectangular distribution (stdv_Wavelength/sqrt(3)) 
    Uncertainty function: uphc.UQ_Laser   
    # Uncertainty function:
    Uncertainty function: uopc.UQ_Scanner
    
# Photonics  
 
  Photodetector:
    Name: Photodetector_YAML
    Photodetector BandWidth: 2.e+9   # [Hz]            
    Load resistor: 500 #1.e+8                 # [Ohm]
    Photodetector efficiency: .70   # Photodetector efficiency [-]
    Dark current: .6e-9                 # In [A]. Dark current in the photodetector.
    Photodetector signalP: 1.e-3 #1.e-2        # [W/m^2]
    Power interval: [1.e-5,1.e-2,1.e-6]  # [1.e-6,1,1.e-5]          # [W] [initial, final, step]
    Gain TIA: 50.e+3                     # [W] Value or 'None' if no TIA in the photodetector
    Active area: 1 # [m] - Keep it 1;
    V Noise TIA:  2.e-3 #None #               # [V] Value or 'None' if no TIA in the photodetector
    Uncertainty function: uphc.UQ_Photodetector # Python module! (You develop a function and save it as a python module)
  

# Analog to digital converter: Performs the uncertainty in signal processing
  ADC:
    Name: ADC_Yaml
    Number of bits: 8 # Effective number of bits (ENOB)
    Reference voltage: 3.3
    Ground voltage: 0
    Quantization error: 0.5
    Sampling frequency: 100.e+6
    Uncertainty sampling freq: 2.e-6 #   #*fs (2.e-6)
    Speckle noise: 0.02 # noise in % of the Doppler frequency
    ADC Bandwidth: 1.e+9
    Uncertainty function: uspc.UQ_SignalProcessor_Classes
        
# Lidar general inputs 
  Lidar general inputs:
    Name: Lidar_gral_inputs_Yaml
    Type: Pulsed # CW/Pulsed for continuous wave or pulsed lidars. The difference is that AOM (photonics module) is included in calculations when Pulsed and probe volume calculations
    Yaw error: 0       # [deg]
    Pitch error: 0     # [deg]
    Roll error: 0      # [deg]
    DataFrame: {}      # Leave empty. To be filled with ouputs by the code itself
---
# Modules:
Modules:
  Optics Module:
    Name: Optics_module_Yamlpl
    Scanner: Scanner #None #
    Uncertainty function: uopc.sum_unc_optics # Python module! (You develop a function and save it as a python module)
  Photonics Module:
    Name: Photonics_module_Yaml
    Photodetector: Photodetector           # Has to be the same name as the instance
    Uncertainty function: uphc.sum_unc_photonics # Python module! (You develop a function and save it as a python module)
  Signal processor Module:
    Name: Signal_processor_module_Yaml
    ADC: ADC
    Frequency analyser: 'None' #Frequency_analyser
---  
# Lidar:
Lidar:
  Name: Test   # This will be the name of the project
  Photonics module: Photonics_Module #None #      # Has to be the same name as the instance
  Optics module: Optics_Module           #None #Has to be the same name as the instance
  Signal processor: Signal_processor_Module
  Lidar inputs: Lidar_inputs               # Has to be the same name as the instance
  Uncertainty function: ulc.sum_unc_lidar  # Python module! (You develop a function and save it as a python module)

---

# ATMOSPHERIC INPUTS:-----------------------------------------------
# Atmospheric_inputs to create the atmospheric scenarios

Atmospheric_inputs:
  Name: 'Atmosphere_Yaml'
  TimeSeries    : False # This defines whether we are using a time series (True) or single values (False) to describe the atmosphere characteristics (T, H, rain and fog)   
  Atmos_TS_FILE : 'None' #'AtmosphericScenarios.csv'  # (... .csv)
  Temperature: [300] # [K] Have to put the same number of elements for temperature and humidity. Always in paired values   
  Humidity: [12]     # [%] 
  Rain: true # for rain and fog intensity intervals might be introduced [none,low, medium, high]
  Fog: false
  Height ground: 0 # [m] Ground height
  Power law exponent: [.2] #power law exponent. Vector of alpha values.
  Vref: 10 # [m/s]
  Wind direction:  [0,359] # degrees [from,to]
  Wind tilt: 0 # degrees
  
---

# Plotting:------------------------------------------------------------
Flags:
  
  Scanning Pattern: True
  Photodetector noise: False
  Save Scanning Coordinates: True
  Probe Volume parameters: False
  Optical_amplifier_noise: False
  Line of sight Velocity Uncertainty: True
  Horizontal Velocity Uncertainty: True
  Wind direction Uncertainty: True





