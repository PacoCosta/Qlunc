# Francisco Costa García
# University of Stuttgart, Stuttgart Wind Energy (SWE) 2020 (c) 

# Inputs file for Qlunc (Quantification lidar uncertainties). 
# Do not change definition names or vary the structure of the file!! Just change parameter values. 
# Users can find a yaml format template in the repository '/Main/Template_yaml_inputs_file.yml'


# DIRECTORIES:------------------------------------------------------

Main_directory: '.' # Directory where Qlunc_Classes.py is

# Lidar values. Modules and components parameters: ------------------------------------------------------

Components:
#Optics: 
  Scanner:
    
    Name:                       X        #  String. Provide an ID to your lidar   
    Origin:                     [x,y,z]  # Lidar position in meters: [x,y,z]
    Error origin:               [x,y,z]  # [m] Error in the location of the lidar (GPS error)
    Pattern time:                x.x     # Time lidar takes to complete a measuring pattern
    Single point measuring time: x.x     # time lidar spans in one single measurement of a pattern
    
    
    # Montecarlo n° of points
    N_MC: x
    
    # Lissajous patterns:
    Lissajous parameters: [,,,,]  # [x_dim,y_dim,z_dim,q,p]
    Sample rate:           x.x    # Lidar sample rate. In meters. Use 0 for now.
    Type:                  X      # Type of the scanning head: VAD or SCAN (Scanning Lidar).
    Pattern:               X      # 'lissajous', user defined pattern or 'None' in case none predefined pattern is used - Only with SCAN type
  
    # STDV in lidar angles and focus distance
    stdv focus distance: [x.x]  # [m] One value for each lidar (this will be removed since the error in focus distance is calculated using telescope parameters (see Telescope section))
    stdv Cone angle:     [x.x]  # [deg]
    stdv Azimuth:        [x.x]  # [deg]   
    
    # Correlations betwen the lidars 1 and 2, and elevation-azimuth correlations of each lidar
    correlations: [,,,,,,]  # Take values between the interval [-1,1] --> [Psi1Psi2, Theta1Theta2, Rho1Rho2, Psi1Theta1,Psi1Theta2,Psi2Theta1,Psi2Theta2]
    
    # Measuring pattern (pointing and range) from origin: 
    # (Represents the points where we want to measure)
    N_Points:        x
    Focus distance: [x.x]  # [m]
    Cone angle:     [x.x]  # [deg] 
    Azimuth:        [x.x]  # [deg] [origin,end]    # Scanning Lidar Pattern:
    
    Href:            x.x   # [m] Height at which the Vref is taken from an external sensor (e.g. cup anemometer)
    
    # Uncertainty function:
    Uncertainty function:  X  # Python module! (You develop a function and save it as a python module)
    
  Optical Circulator:
    Name:                 X    # String    
    Insertion loss:       x.x  # [dB]  This is a term losses. Only Has sense if the uncertainties are correlated...???
    SNR:                  x.x  # [dB]
    Uncertainty function: X    # Python module! (You develop a function and save it as a python module)
  
  Telescope:
    Name:                            X    # String
    # CW lidar:
    Aperture:                        x.x  #[m]     
    Focal length:                    x.x  #[m] 
    Fiber-lens distance:             x.x  #[m] 
    Fiber-lens offset:               x.x  #[m] 
    Effective radius telescope:      x.x  #[m] 
    Output beam radius:              x.x  #[m] 
    Stdv Aperture:                   x.x  #[m]                     
    stdv Focal length:               x.x  #[m]                      
    stdv Fiber-lens distance:        x.x             
    stdv Fiber-lens offset:          x.x             
    stdv Effective radius telescope: x.x  
    
    # Pulsed lidar: This is how the pulse is defined and the rayleigh distance calculated 
    Pulse shape:                     x.x  # Pulse shape (tau) (only for pulsed lidar) - Defined as the FWHM of the pulse shape
    Gate length:                     x.x  # Gate length   (tau_meas)
    stdv Pulse shape:                x.x  #(stdv_tau)
    stdv Gate length:                x.x  # (stdv tau_meas)
    
    Uncertainty function: uopc.UQ_Telescope
    
# Photonics  
  Optical Amplifier:   
    Name: X # String   
    # Noise figure in dB. Could be a well known value or a table.
    # If table (FigureNoise Vs Wavelength) is provided Qlunc 
    # interpolates to obtain a most accurate value according 
    # with the lidar nominal wavelength. Interpolation param. could 
    # be tunned in Qlunc_Photonics_Classes --> UQ_Optical_amplifier
    Optical amplifier BW:           x.x       # [Hz] Bandwidth optical amplifier
    Optical amplifier noise figure: X         # String. Relative Directory to where Noise figure data is. Either a well-known value or the directory where the file is.   
    Optical amplifier gain:         x.x       # [dB] Optical amplifier gain
    Power interval:                [x.x,y.y]  # [mW]
    Uncertainty function:           X # Python module! (You develop a function and save it as a python module)
 
  Photodetector:
    Name:                     X      # String   
    Photodetector BandWidth:  x.x    # [Hz]            
    Load resistor:            x.x    # [Ohm]
    Photodetector efficiency: x.x    # Photodetector efficiency [-]
    Dark current:             x.x    # In [A]. Dark current in the photodetector.
    Photodetector signalP:    x.x    # [W/m^2]
    Power interval:           [x,y]  # [W]
    Gain TIA:                 x      # [dB] Value or 'None' if no TIA in the photodetector
    Active Surface:           x      # [m]
    V Noise TIA:              x      # [V] Value or 'None' if no TIA in the photodetector
    Uncertainty function:     x      # Python module! (You develop a function and save it as a python module)
  
  Laser:
    Name:                 X    # String
    Wavelength:           x.x  # [m]
    stdv Wavelength:      x.x  #[m]
    Confidence interval:  x    # 1 => confidence interval= 68.27%, 2 => confidence interval= 90%, 3=> confidence interval= 95% 4=> confidence interval = 95.45%, 5 => confidence interval= 99%, 6=> confidence interval= 99.73%
    Output power:         x    #[w]
    Bandwidth:            x.x  # Hz
    RIN:                  x    # dBc/Hz
    Uncertainty function: X

  AOM:
    Name:                 X  # String
    Insertion loss:       x  # dB
    Uncertainty function: x  # Python module! (You develop a function and save it as a python module)

# Analog to digital converter
  ADC:
    Name:                 X    # String
    N bits:               x.x  # Effective number off bits (ENOB)
    Reference voltage:    x.x  # [V]
    Ground voltage:       x.x  # [V]
    Quantization error:   x
    ADC Bandwidth:        x    # Hz
    Uncertainty function: x    # Python module! (You develop a function and save it as a python module)
        
# Lidar general inputs 
  Lidar general inputs:
    Name:        X    # String
    Type:        X    # CW/Pulsed for continuous wave or pulsed lidars. The difference is that AOM (photonics module) is included in calculations when Pulsed and probe volume calculations
    Wavelength:  x.x  # [m]
    Yaw error:   x.x  # [deg]
    Pitch error: x.x  # [deg]
    Roll error:  x.x  # [deg]
---
# Modules:
Modules:
  Optics Module:
    Name:                 X  # String
    Scanner:              X  # String. Has to be the same name as the instance
    Optical circulator:   X  # String. Has to be the same name as the instance
    Telescope:            X  # String. Has to be the same name as the instance 
    Uncertainty function: X  # Python module! (You develop a function and save it as a python module)
  Photonics Module:
    Name:                 X  # String
    Photodetector:        X  # String. Has to be the same name as the instance
    Optical amplifier:    X  # String. Has to be the same name as the instance
    AOM:                  X  # String. Has to be the same name as the instance
    Laser:                X  # String. Has to be the same name as the instance
    Uncertainty function: X  # Python module! (You develop a function and save it as a python module)
  Signal processor Module:
    Name:                 X  # String
    ADC:                  X  # String. Has to be the same name as the instance
    Frequency analyser:   X  # String. Has to be the same name as the instance
---  
# Lidar:
Lidar:
  Name:                    X  # String
  Photonics module:        X  # String. Has to be the same name as the instance
  Optics module:           X  # String. Has to be the same name as the instance
  Power module:            X  # String. Has to be the same name as the instance
  Signal processor module: X  # String. Has to be the same name as the instance
  Lidar inputs:            X  # String. Has to be the same name as the instance
  Uncertainty function:    X  # Python module! (You develop a function and save it as a python module)

---

# Data processing methods: 

WFR model:
  Name:   X  # String
  Model: 'X' # 'Flat' Complex, Floating, None=not apply WFR method

Filtering method:
  Name:    X  # String
  Method: 'X' # Outliers, None=not apply filtering

# ATMOSPHERIC INPUTS:-----------------------------------------------
# Atmospheric_inputs to create the atmospheric scenarios

Atmospheric_inputs:
  Name:           X     #  String   
  TimeSeries:     X     #  This defines whether we are using a time series (True) or single values (False) to describe the atmosphere characteristics (T, H, rain and fog)   
  Atmos_TS_FILE : X     #  (... .csv)
  Temperature:    [x.x] #  [K] Have to put the same number of elements for temperature and humidity. Always in paired values   
  Humidity:       [x.x] #  [%] 
  Rain:           true  #  for rain and fog intensity intervals might be introduced [none,low, medium, high]
  Fog:            false
  Height_ground:  x.x   #  [m] Ground height
  PL_exp:        [x.x]  #  power law exponent
  Vref:           x.x   #  [m/s] Mean wind velocity used as best estimate from another sensor (e.g. cup)
  Wind_direction: x.x   #  degrees
  Wind_tilt:      x.x   #  degrees
  
---

# Data processing:-----------------------------------------------------
Probe Volume:
  Name:                  X  # String
  Extinction coeficient: x.x

# Plotting:------------------------------------------------------------
Flags:
  Line of sight Velocity Uncertainty: True
  Scanning Pattern:                   False
  Photodetector noise:                True
  Save Scanning Coordinates:          False
  Probe Volume parameters:            True
  Optical_amplifier_noise:            True
  Horizontal Velocity Uncertainty:    True
